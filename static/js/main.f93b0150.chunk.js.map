{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","_ref","socket","username","room","currentMessage","setCurrentMessage","useState","messageList","setMessageList","sendMessage","async","messageData","author","message","time","Date","now","getHours","getMinutes","emit","list","useEffect","on","data","_jsxs","className","children","_jsx","ScrollToBottom","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","io","connect","App","setUsername","setRoom","showChat","setShowChat","joinRoom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"uMA4EeA,MAzEf,SAAaC,GAA8B,IAA7B,OAAEC,EAAM,SAAEC,EAAQ,KAAEC,GAAMH,EACtC,MAAOI,EAAgBC,GAAqBC,mBAAS,KAC9CC,EAAaC,GAAkBF,mBAAS,IAEzCG,EAAcC,UAClB,GAAuB,KAAnBN,EAAuB,CACzB,MAAMO,EAAc,CAClBR,KAAMA,EACNS,OAAQV,EACRW,QAAST,EACTU,KACE,IAAIC,KAAKA,KAAKC,OAAOC,WACrB,IACA,IAAIF,KAAKA,KAAKC,OAAOE,oBAGnBjB,EAAOkB,KAAK,eAAgBR,GAClCH,GAAgBY,GAAS,IAAIA,EAAMT,KACnCN,EAAkB,GACpB,GASF,OANAgB,qBAAU,KACRpB,EAAOqB,GAAG,mBAAoBC,IAC5Bf,GAAgBY,GAAS,IAAIA,EAAMG,IAAM,GACzC,GACD,CAACtB,IAGFuB,eAAA,OAAKC,UAAU,cAAaC,SAAA,CAC1BC,cAAA,OAAKF,UAAU,cAAaC,SAC1BC,cAAA,KAAAD,SAAG,gBAELC,cAAA,OAAKF,UAAU,YAAWC,SACxBC,cAACC,IAAc,CAACH,UAAU,oBAAmBC,SAC1CnB,EAAYsB,KAAKC,GAEdH,cAAA,OACEF,UAAU,UACVM,GAAI7B,IAAa4B,EAAelB,OAAS,MAAQ,QAAQc,SAEzDF,eAAA,OAAAE,SAAA,CACEC,cAAA,OAAKF,UAAU,kBAAiBC,SAC9BC,cAAA,KAAAD,SAAII,EAAejB,YAErBW,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BC,cAAA,KAAGI,GAAG,OAAML,SAAEI,EAAehB,OAC7Ba,cAAA,KAAGI,GAAG,SAAQL,SAAEI,EAAelB,uBAQ7CY,eAAA,OAAKC,UAAU,cAAaC,SAAA,CAC1BC,cAAA,SACEK,KAAK,OACLC,MAAO7B,EACP8B,YAAY,SACZC,SAAWC,IACT/B,EAAkB+B,EAAMC,OAAOJ,MAAM,EAEvCK,WAAaF,IACG,UAAdA,EAAMG,KAAmB9B,GAAa,IAG1CkB,cAAA,UAAQa,QAAS/B,EAAYiB,SAAC,gBAItC,ECrEA,MAAMzB,EAASwC,IAAGC,QAAQ,yBA0CXC,MAxCf,WACE,MAAOzC,EAAU0C,GAAetC,mBAAS,KAClCH,EAAM0C,GAAWvC,mBAAS,KAC1BwC,EAAUC,GAAezC,oBAAS,GASzC,OACEqB,cAAA,OAAKF,UAAU,MAAKC,SAChBoB,EAoBAnB,cAAC5B,EAAI,CAACE,OAAQA,EAAQC,SAAUA,EAAUC,KAAMA,IAnBhDqB,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAChCC,cAAA,MAAAD,SAAI,gBACJC,cAAA,SACEK,KAAK,OACLE,YAAY,UACZC,SAAWC,IACTQ,EAAYR,EAAMC,OAAOJ,MAAM,IAGnCN,cAAA,SACEK,KAAK,OACLE,YAAY,aACZC,SAAWC,IACTS,EAAQT,EAAMC,OAAOJ,MAAM,IAG/BN,cAAA,UAAQa,QA1BCQ,KACE,KAAb9C,GAA4B,KAATC,IACrBF,EAAOkB,KAAK,YAAahB,GACzB4C,GAAY,GACd,EAsBgCrB,SAAC,oBAOrC,ECjCeuB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAKpD,IAAkD,IAAjD,OAAEqD,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASzD,EACpEqD,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EAAY,GAExB,ECJFQ,IAASC,OACPhC,cAACiC,IAAMC,WAAU,CAAAnC,SACfC,cAACgB,EAAG,MAENmB,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.f93b0150.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time:\n          new Date(Date.now()).getHours() +\n          \":\" +\n          new Date(Date.now()).getMinutes(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n  }, [socket]);\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <p>Live Chat</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent) => {\n            return (\n              <div\n                className=\"message\"\n                id={username === messageContent.author ? \"you\" : \"other\"}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\">{messageContent.time}</p>\n                    <p id=\"author\">{messageContent.author}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Hey...\"\n          onChange={(event) => {\n            setCurrentMessage(event.target.value);\n          }}\n          onKeyPress={(event) => {\n            event.key === \"Enter\" && sendMessage();\n          }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import \"./App.css\";\nimport io from \"socket.io-client\";\nimport { useState } from \"react\";\nimport Chat from \"./Chat\";\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>Join A Chat</h3>\n          <input\n            type=\"text\"\n            placeholder=\"John...\"\n            onChange={(event) => {\n              setUsername(event.target.value);\n            }}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            onChange={(event) => {\n              setRoom(event.target.value);\n            }}\n          />\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n      ) : (\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}